#!/bin/bash
#
# version: 2.2.0
# date: 2018-12-13

DEFAULT_CONFIG_FILE="/etc/vbmcctl.cfg"

DEFAULT_BMC_ADDR=127.0.0.1
DEFAULT_BMC_PORT=623
DEFAULT_BMC_USERNAME=admin
DEFAULT_BMC_PASSWORD=password
DEFAULT_BMC_URI="qemu:///system"


##############################################################################
#     Functions
##############################################################################

usage() {
  echo
  echo -e "USAGE: ${0} create|delete|reset|list|start|stop|restart|status [config=<config_file>] [<vm_name> [<vm_name> ...]] [nocolor]"
  echo
  echo  "  ACTIONS:"
  echo  "    create        -creates all virtual BMC devices listed in the config file"
  echo  "                   or specified on the CLI along with their corresponding veth pairs"
  echo  "    delete        -deletes all virtual BMC devices listed in the config file"
  echo  "                   or specified on the CLI along with their corresponding veth pairs"
  echo  "    reset         -resets (deletes then creates) all virtual BMC devices"
  echo  "                   listed in the config file or specified on the CLI along with"
  echo  "                   their corresponding veth pairs"
  echo  "    list          -lists all virtual BMC devices listed in the configuration"
  echo  "                   file or specified on the CLI along with thier current status"
  echo  "    start         -starts all virtual BMC devices listed in the configuration"
  echo  "                   or specified on the CLI" 
  echo  "                   NOTE: This does not create their corresponding veth pairs"
  echo  "                         and if they do not exist throws an error and exists."
  echo  "    stop          -stop all virtual BMC devices listed in the configuration"
  echo  "                   or specified on the CLI" 
  echo  "                   NOTE: This does not delete their corresponding veth pairs."
  echo  "    restart       -stop and then starts all virtual BMC devices listed in the" 
  echo  "                   configuration file or specified on the CLI" 
  echo  "    status        -displays the status for all virtual BMC devices listed in"
  echo  "                   the configuration or specified on the CLI" 
  echo
  echo  "  OPTIONS:"
  echo  "    <config_file> -path to an alternate configuration file"
  echo
  echo  "    <vm_name>     -name of a VM (virtual BMC device) listed in the config file"
  echo  "                   Multiple VM names can be specified on the CLI seperated by spaces"
  echo
  echo  "    nocolor       -turns off colorization of the output"
  echo
}

set_colors() {
  if ! echo ${*} | grep -q nocolor
  then
    ### Colors ###
    RED='\e[0;31m'
    LTRED='\e[1;31m'
    BLUE='\e[0;34m'
    LTBLUE='\e[1;34m'
    GREEN='\e[0;32m'
    LTGREEN='\e[1;32m'
    ORANGE='\e[0;33m'
    YELLOW='\e[1;33m'
    CYAN='\e[0;36m'
    LTCYAN='\e[1;36m'
    PURPLE='\e[0;35m'
    LTPURPLE='\e[1;35m'
    GRAY='\e[1;30m'
    LTGRAY='\e[0;37m'
    WHITE='\e[1;37m'
    NC='\e[0m'
    ##############
  fi
}

check_for_vbmc_command() {
  if ! which vbmc > /dev/null
  then
    echo
    echo -e "${LTRED}ERROR: The vbmc command does not seem to be available.${NC}"
    echo
    exit
  fi
}

get_config_file() {
  if echo ${*} | grep -q "config="
  then
    CONFIG_FILE=$(echo ${*} | grep -o "config=.*" | cut -d " " -f 1 | cut -d = -f 2)
  else
    CONFIG_FILE="${DEFAULT_CONFIG_FILE}"
  fi

  if [ -e ${CONFIG_FILE} ]
  then
    source ${CONFIG_FILE}
  fi
}

get_vm_list() {
  VM_LIST=$(echo $* | sed 's/create\|delete\|reset\|list\|start\|restart\|stop\|status\|nocolor//' | sed "s+config=${CONFIG_FILE}++")
  #echo
  #echo "VM_LIST=${VM_LIST}"
  #echo
  #exit

  if ! [ -z "${VM_LIST}" ]
  then
    for VM in ${VM_LIST}
    do
      for BMC in ${VIRTUAL_BMC_LIST}
      do
        if echo ${BMC} | grep -q ${VM}
        then
          NEW_VIRTUAL_BMC_LIST="${NEW_VIRTUAL_BMC_LIST} ${BMC}"
        fi
      done
    done
  fi

  #echo
  #echo "VIRTUAL_BMC_LIST=${VIRTUAL_BMC_LIST}"
  #echo
  #echo "NEW_VIRTUAL_BMC_LIST=${NEW_VIRTUAL_BMC_LIST}"
  #echo

  if ! [ -z "${NEW_VIRTUAL_BMC_LIST}" ]
  then
    VIRTUAL_BMC_LIST="$(echo ${NEW_VIRTUAL_BMC_LIST} | sed '/^ /d')"
  fi

  #echo
  #echo "VIRTUAL_BMC_LIST=${VIRTUAL_BMC_LIST}"
  #echo
  #exit
}

run () {
  echo -e "${LTGREEN}COMMAND: ${GRAY}$*${NC}"
  "$@"
}

test_config_file_variables() {
  if [ -z "${VIRTUAL_BMC_NETWORK}" ]
  then
    echo -e "${LTRED}ERROR: No BMC network defined.${NC}"
    local NO_CONFIG=Y
  fi

  if [ -z "${VIRTUAL_BMC_LIST}" ]
  then
    echo -e "${LTRED}ERROR: No BMC devices defined.${NC}"
    local NO_CONFIG=Y
  fi

  case ${NO_CONFIG} in
    Y)
      echo
      echo -e "${LTRED}Config file parameters are missing. Exiting.${NC}"
      echo
      exit
    ;;
  esac
}

virtualbmc_control() {
  local USAGE_STRING="USAGE: ${0} <action> <vm_name> <bmc_addr> <bnc_port> <bmc_network_name> <bmc_username> <bmc_password>"

  if [ -z ${1} ]
  then
    echo
    echo "ERROR: You must provide the action: create | delete | reset | list"
    echo
    echo ${USAGE_STRING}
    echo
    return 1
  elif [ -z ${2} ]
  then
    echo
    echo "ERROR: You must provide the name of the VM"
    echo
    echo ${USAGE_STRING}
    echo
    return 1
  elif [ -z ${3} ]
  then
    echo
    echo "ERROR: You must provide the address of the BMC"
    echo
    echo ${USAGE_STRING}
    echo
    return 1
  elif [ -z ${4} ]
  then
    echo
    echo "ERROR: You must provide the port of the BMC"
    echo
    echo ${USAGE_STRING}
    echo
    return 1
  elif [ -z ${5} ]
  then
    echo
    echo "ERROR: You must provide the name of the BMC network"
    echo
    echo ${USAGE_STRING}
    echo
    return 1
  elif [ -z ${6} ]
  then
    echo
    echo "ERROR: You must provide the username for the BMC"
    echo
    echo ${USAGE_STRING}
    echo
    return 1
  elif [ -z ${7} ]
  then
    echo
    echo "ERROR: You must provide the password for the BMC"
    echo
    echo ${USAGE_STRING}
    echo
    return 1
  fi

  local ACTION=${1}
  local VM_NAME=${2}
  local BMC_ADDR=${3}
  local BMC_PORT=${4}
  local BMC_NETWORK_NAME=${5}
  local BMC_USERNAME=${6}
  local BMC_PASSWORD=${7}
  local BMC_URI=${8}
  if [ -z ${BMC_URI} ]
  then
    BMC_URI="qemu:///system"
  fi

  if echo ${BMC_ADDR} | grep -q "/"
  then
    local BMC_NETWORK_CIDR=$(echo ${BMC_ADDR} | cut -d "/" -f 2)
    local BMC_ADDR=$(echo ${BMC_ADDR} | cut -d "/" -f 1)
  elif [ -z $(ip addr show dev ${BMC_NETWORK_NAME} | grep " .inet " | awk '{ print $2 }' | cut -d "/" -f 2) ]
  then
    local BMC_NETWORK_CIDR=24
  else
  local BMC_NETWORK_CIDR=$(ip addr show dev ${BMC_NETWORK_NAME} | grep " .inet " | awk '{ print $2 }' | cut -d "/" -f 2)
  fi

  #echo
  #echo "########################################################"
  #echo ACTION=${ACTION}
  #echo VM_NAME=${VM_NAME}
  #echo BMC_ADDR=${BMC_ADDR}
  #echo BMC_PORT=${BMC_PORT}
  #echo BMC_NETWORK_NAME=${BMC_NETWORK_NAME}
  #echo BMC_USERNAME=${BMC_USERNAME}
  #echo BMC_PASSWORD=${BMC_PASSWORD}
  #echo BMC_URI=${BMC_URI}
  #echo BMC_NETWORK_CIDR=${BMC_NETWORK_CIDR}
  #echo "########################################################"
  #echo;read

  if echo ${VM_NAME} | grep -q "-"
  then
    local VM_SHORT_NAME=$(echo ${VM_NAME} | cut -d "-" -f 2)
  else
    local VM_SHORT_NAME=${VM_NAME}
  fi

  local VM_SHORT_NAME_LEN=$(echo ${VM_SHORT_NAME} | wc -m)
  ((VM_SHORT_NAME_LEN--))

  if [ "${VM_SHORT_NAME_LEN}" -le 7 ]
  then
    local PREF=${VM_SHORT_NAME}
  else
    local NUM=$(echo ${VM_SHORT_NAME} | grep -o [0-9]*$)
    if [ -z ${NUM} ]
    then
      local PREF=$(echo ${VM_SHORT_NAME} | cut -c 1,2,3,4,5,6,7)
    else
      local PREF=$(echo ${VM_SHORT_NAME} | cut -c 1,2,3,4)
    fi
  fi

  # This is the interface that is attached to the bridge
  local VETH_NAME_A=${PREF}${NUM}-bmc-nic
  # This is the inteface in the host that gets the IP addr
  local VETH_NAME_B=${PREF}${NUM}-bmc

  #echo "--------------------------------------"
  #echo VM_SHORT_NAME=${VM_SHORT_NAME}
  #echo VM_SHORT_NAME_LEN=${VM_SHORT_NAME_LEN}
  #echo
  #echo NUM=${NUM}
  #echo PREF=${PREF}
  #echo
  #echo VETH_NAME_A=${VETH_NAME_A}
  #echo VETH_NAME_B=${VETH_NAME_B}
  #echo "--------------------------------------"
  #echo

  case ${ACTION}
  in
    create)
      if ! ip addr show | grep -q ${VETH_NAME_B}
      then
        echo
        # Create the veth pair for the BMC
        #echo sudo ip link add dev ${VETH_NAME_A} type veth peer name ${VETH_NAME_B}
        run sudo ip link add dev ${VETH_NAME_A} type veth peer name ${VETH_NAME_B}
    
        #echo sudo ip link set dev ${VETH_NAME_A} up
        run sudo ip link set dev ${VETH_NAME_A} up
    
        #echo sudo ip link set ${VETH_NAME_A} master ${BMC_NETWORK_NAME}
        run sudo ip link set ${VETH_NAME_A} master ${BMC_NETWORK_NAME}
    
        #echo sudo ip addr add ${BMC_ADDR} dev ${VETH_NAME_B}
        run sudo ip addr add ${BMC_ADDR}/${BMC_NETWORK_CIDR} dev ${VETH_NAME_B}
    
        #echo sudo ip link set ${VETH_NAME_B} up
        run sudo ip link set ${VETH_NAME_B} up
 
      fi
      if ! sudo vbmc list | grep -q ${VM_NAME}
      then
        echo
        # Create and start the BMC
        run sudo vbmc add ${VM_NAME} --address ${BMC_ADDR} --port ${BMC_PORT} --username ${BMC_USERNAME} --password ${BMC_PASSWORD} --libvirt-uri ${BMC_URI}
        run sudo vbmc start ${VM_NAME}
        run sudo vbmc show ${VM_NAME}

        echo
      fi
    ;;
    delete)
      echo
      # Stop and remove the BMC
      run sudo vbmc stop ${VM_NAME}
      run sudo vbmc delete ${VM_NAME}

      # Remove the veth pair for the BMC
      #echo sudo ip link set ${VETH_NAME_B} down
      run sudo ip link set ${VETH_NAME_B} down
  
      #echo sudo ip addr del ${BMC_ADDR} dev ${VETH_NAME_B}
      run sudo ip addr del ${BMC_ADDR}/${BMC_NETWORK_CIDR} dev ${VETH_NAME_B}
  
      #echo sudo ip link set dev ${VETH_NAME_A} down
      run sudo ip link set dev ${VETH_NAME_A} down
  
      #echo sudo ip link del dev ${VETH_NAME_A} type veth
      run sudo ip link del dev ${VETH_NAME_A} type veth
      
      echo
    ;;
    start)
      if ! ip addr show | grep -q ${VETH_NAME_B}
      then
        echo
        echo -e "${ORANGE}WARNING: The veth for this BMC device does not seem to exist. Skipping ...${NC}"
        echo -e "${ORANGE}         (If you wish to recreate it use the create or reset option instead)${NC}"
        echo
      fi
      if sudo vbmc list | grep -q ${VM_NAME}
      then
        #echo
        # Start the BMC
        #run sudo vbmc start ${VM_NAME}
        #run sudo vbmc show ${VM_NAME}
        sudo vbmc start ${VM_NAME}
        #echo
      fi
    ;;
    restart)
      if ! ip addr show | grep -q ${VETH_NAME_B}
      then
        echo
        echo -e "${ORANGE}WARNING: The veth for this BMC device does not seem to exist. Skipping ...${NC}"
        echo -e "${ORANGE}         (If you wish to recreate it use the create or reset option instead)${NC}"
        echo
      fi
      if sudo vbmc list | grep -q ${VM_NAME}
      then
        #echo
        # Stop the BMC
        #run sudo vbmc stop ${VM_NAME}
        sudo vbmc stop ${VM_NAME}
        # Start the BMC
        #run sudo vbmc start ${VM_NAME}
        #run sudo vbmc show ${VM_NAME}
        sudo vbmc start ${VM_NAME}
        #echo
      fi
    ;;
    stop)
      if sudo vbmc list | grep -q ${VM_NAME}
      then
        #echo
        # Stop the BMC
        #run sudo vbmc stop ${VM_NAME}
        #run sudo vbmc show ${VM_NAME}
        sudo vbmc stop ${VM_NAME}
        #echo
      fi
    ;;
    status)
      if sudo vbmc list | grep -q ${VM_NAME}
      then
        #echo
        # Display status of the BMC
        #run sudo vbmc list | grep ${VM_NAME} | awk '{ print $4 }'
        sudo vbmc list | grep ${VM_NAME} | awk '{ print $4 }'
        #echo
      fi
    ;;
    test)
      echo
      sudo vbmc list | grep -q "${VM_NAME}"
      return $?
    ;;
  esac
}

set_virtualbmc_control_args() {
    VM_NAME=$(echo ${BMC} | cut -d , -f 1)
    BMC_ADDR=$(echo ${BMC} | cut -d , -f 2)

    if [ -z ${BMC_ADDR} ]
    then
      BMC_ADDR=${DEFAULT_BMC_ADDR}
    fi

    BMC_PORT=$(echo ${BMC} | cut -d , -f 3)
    if [ -z ${BMC_PORT} ]
    then
      BMC_PORT=${DEFAULT_BMC_PORT}
    fi

    BMC_USERNAME=$(echo ${BMC} | cut -d , -f 4)
    if [ -z ${BMC_USERNAME} ]
    then
      BMC_USERNAME=${DEFAULT_BMC_USERNAME}
    fi

    BMC_PASSWORD=$(echo ${BMC} | cut -d , -f 5)
    if [ -z ${BMC_PASSWORD} ]
    then
      BMC_PASSWORD=${DEFAULT_BMC_PASSWORD}
    fi

    BMC_URI=$(echo ${BMC} | cut -d , -f 6)
    if [ -z ${BMC_URI} ]
    then
      BMC_URI=${DEFAULT_BMC_URI}
    fi
}

unset_virtualbmc_control_args() {
    unset VM_NAME
    unset BMC_ADDR
    unset BMC_PORT
    unset BMC_USERNAME
    unset BMC_PASSWORD
    unset BMC_URI
}

create_virtual_bmc_devices() {
  echo
  echo -e "${LTBLUE}Creating virtual BMC devices ...${NC}"
  echo -e "${LTBLUE}=====================================================================${NC}"
  echo

  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}

    echo -e "${LTCYAN}VM Name: ${GRAY}${VM_NAME}${NC}"

    run virtualbmc_control create ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD} ${BMC_URI}
    unset_virtualbmc_control_args
    echo -e "${LTBLUE}=====================================================================${NC}"
    echo
  done
}

delete_virtual_bmc_devices() {
  echo
  echo -e "${LTBLUE}Deleting virtual BMC devices ...${NC}"
  echo -e "${LTBLUE}=====================================================================${NC}"
  echo

  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}

    echo -e "${LTCYAN}VM Name: ${GRAY}${VM_NAME}${NC}"

    run virtualbmc_control delete ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD} ${BMC_URI}
    unset_virtualbmc_control_args
    echo -e "${LTBLUE}=====================================================================${NC}"
    echo
  done
}

start_virtual_bmc_devices() {
  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}
    #echo -e "${LTCYAN}VM Name: ${GRAY}${VM_NAME}${NC}"
    #run virtualbmc_control start ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD}
    virtualbmc_control start ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD} ${BMC_URI}
    unset_virtualbmc_control_args
    #echo -e "${LTBLUE}=====================================================================${NC}"
    #echo
  done
}

restart_virtual_bmc_devices() {
  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}
    #echo -e "${LTCYAN}VM Name: ${GRAY}${VM_NAME}${NC}"
    #run virtualbmc_control restart ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD}
    virtualbmc_control restart ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD} ${BMC_URI}
    unset_virtualbmc_control_args
    #echo -e "${LTBLUE}=====================================================================${NC}"
    #echo
  done
}

stop_virtual_bmc_devices() {
  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}
    #echo -e "${LTCYAN}VM Name: ${GRAY}${VM_NAME}${NC}"
    #run virtualbmc_control stop ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD}
    virtualbmc_control stop ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD} ${BMC_URI}
    unset_virtualbmc_control_args
    #echo -e "${LTBLUE}=====================================================================${NC}"
    #echo
  done
}

reset_virtual_bmc_devices() {
  echo
  echo -e "${LTBLUE}Resetting virtual BMC devices ...${NC}"
  echo -e "${LTBLUE}=====================================================================${NC}"
  echo

  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}

    echo -e "${LTBLUE}Deleting virtual BMC device ...${NC}"
    echo -e "${LTBLUE}---------------------------------------------------------${NC}"
    echo -e "${LTCYAN}VM Name: ${GRAY}${VM_NAME}${NC}"
    run virtualbmc_control delete ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD} ${BMC_URI}

    echo -e "${LTBLUE}Creating virtual BMC device ...${NC}"
    echo -e "${LTBLUE}---------------------------------------------------------${NC}"
    echo -e "${LTCYAN}VM Name: ${GRAY}${VM_NAME}${NC}"
    run virtualbmc_control create ${VM_NAME} ${BMC_ADDR} ${BMC_PORT} ${VIRTUAL_BMC_NETWORK} ${BMC_USERNAME} ${BMC_PASSWORD} ${BMC_URI}
    unset_virtualbmc_control_args
    echo
  done

  echo -e "${LTBLUE}=====================================================================${NC}"
}

list_virtual_bmc_devices() {
  echo
  echo -e "${LTBLUE}Defined virtual BMC devices:${NC}"
  echo -e "${LTBLUE}=====================================================================${NC}"
  echo

  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}

    local VBMC_STATUS=$(sudo vbmc list | grep ${VM_NAME} | awk '{ print $4 }')

    echo -e "${LTBLUE}BMC device VM Name:     ${LTPURPLE}${VM_NAME}${NC}"
    echo -e "${LTBLUE}BMC device IP Address:  ${LTPURPLE}${BMC_ADDR}${NC}"
    echo -e "${LTBLUE}BMC device Port:        ${LTPURPLE}${BMC_PORT}${NC}"
    echo -e "${LTBLUE}BMC device User Name:   ${LTPURPLE}${BMC_USERNAME}${NC}"
    echo -e "${LTBLUE}BMC device Password:    ${LTPURPLE}${BMC_PASSWORD}${NC}"
    echo -e "${LTBLUE}BMC device Libvirt URI: ${LTPURPLE}${BMC_URI}${NC}"
    case ${VBMC_STATUS} in
      running)
        echo -e "${LTBLUE}BMC device Status:      ${LTGREEN}${VBMC_STATUS}${NC}"
      ;;
      down)
        echo -e "${LTBLUE}BMC device Status:      ${LTRED}${VBMC_STATUS}${NC}"
      ;;
      *)
        echo -e "${LTBLUE}BMC device Status:      ${ORANGE}missing${NC}"
      ;;
    esac
    echo -e "${LTBLUE}---------------------------------------------------------${NC}"
    unset_virtualbmc_control_args
  done

    echo
    echo -e "${LTBLUE}=====================================================================${NC}"
    echo
}

status_virtual_bmc_devices() {
  for BMC in ${VIRTUAL_BMC_LIST}
  do
    set_virtualbmc_control_args ${BMC}

    local VBMC_STATUS=$(sudo vbmc list | grep ${VM_NAME} | awk '{ print $4 }')

    case ${VBMC_STATUS} in
      running)
        echo -e "${LTBLUE}${VM_NAME}:      ${LTGREEN}${VBMC_STATUS}${NC}"
      ;;
      down)
        echo -e "${LTBLUE}${VM_NAME}:      ${LTRED}${VBMC_STATUS}${NC}"
      ;;
      *)
        echo -e "${LTBLUE}${VM_NAME}:      ${ORANGE}missing${NC}"
      ;;
    esac
    unset_virtualbmc_control_args
  done
}

main() {
  set_colors ${*}
  check_for_vbmc_command
  get_config_file ${*}
  get_vm_list ${*}

  if [ -z ${1} ]
  then
    echo
    usage
    exit
  fi

  test_config_file_variables

  case ${1} in
    create)
      create_virtual_bmc_devices
    ;;
    delete)
      delete_virtual_bmc_devices
    ;;
    reset)
      reset_virtual_bmc_devices
    ;;
    start)
      start_virtual_bmc_devices
    ;;
    restart)
      restart_virtual_bmc_devices
    ;;
    stop)
      stop_virtual_bmc_devices
    ;;
    list)
      list_virtual_bmc_devices
    ;;
    status)
      status_virtual_bmc_devices
    ;;
  esac
}

######################################################################################################

main $*

